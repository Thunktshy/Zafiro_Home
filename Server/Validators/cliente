// server/validateClient.js
const { body, oneOf, validationResult } = require('express-validator');

const validateClient = [
  // Must supply either cuenta or email
  oneOf([
    body('cuenta')
      .exists({ checkFalsy: true })
      .withMessage('Debe proporcionar “cuenta”'),
    body('email')
      .exists({ checkFalsy: true })
      .withMessage('Debe proporcionar “email”')
  ], 'Debe proporcionar “cuenta” o “email” para loguearse'),

  // cuenta: nvarchar(20) NOT NULL
  body('cuenta')
    .optional()
    .isString().withMessage('“cuenta” debe ser texto')
    .isLength({ max: 20 }).withMessage('“cuenta” máximo 20 caracteres'),

  // email: nvarchar(150) NOT NULL UNIQUE, must be valid email
  body('email')
    .optional()
    .isEmail().withMessage('“email” debe ser una dirección de correo válida')
    .isLength({ max: 150 }).withMessage('“email” máximo 150 caracteres'),

  // contrasena: nvarchar(255) NOT NULL
  body('contrasena')
    .exists({ checkFalsy: true })
    .withMessage('La “contrasena” es obligatoria')
    .isString().withMessage('“contrasena” debe ser texto')
    .isLength({ max: 255 }).withMessage('“contrasena” máximo 255 caracteres'),

  // estado: bit NOT NULL DEFAULT 1 (if you ever allow it in payload)
  body('estado')
    .optional()
    .isBoolean().withMessage('“estado” debe ser true o false'),

  // catch & return errors
  (req, res, next) => {
    const errors = validationResult(req);
    if (!errors.isEmpty()) {
      // return first-level array of { msg, param, ... }
      return res.status(400).json({ errors: errors.array() });
    }
    next();
  }
];

module.exports = { validateClient };
